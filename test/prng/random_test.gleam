import gleeunit/should
import prng/random
import prng/seed

pub fn int_list_behaves_the_same_as_elm_implementation_seed_128_test() {
  let expected = [
    14, 18, 15, 59, 33, 101, 76, 25, 43, 94, 49, 87, 32, 63, 84, 38, 84, 45, 64,
    89, 110, 81, 18, 85, 55, 58, 51, 38, 35, 71, 22, 40, 31, 27, 44, 23, 38, 58,
    72, 50, 46, 27, 95, 20, 14, 106, 91, 52, 96, 108, 13, 101, 70, 16, 107, 110,
    100, 103, 71, 43, 91, 71, 54, 108, 48, 44, 36, 69, 28, 63, 20, 71, 25, 60,
    97, 93, 74, 80, 39, 38, 91, 98, 31, 49, 94, 73, 90, 92, 11, 34, 49, 12, 38,
    11, 19, 58, 23, 81, 29, 103, 77, 73, 26, 89, 22, 51, 82, 16, 99, 61, 38, 65,
    49, 39, 111, 89, 70, 78, 36, 23, 70, 76, 91, 92, 11, 76, 75, 95, 83, 110, 88,
    68, 54, 39, 87, 93, 109, 49, 95, 38, 11, 43, 31, 42, 45, 79, 62, 13, 63, 63,
    32, 54, 89, 83, 28, 89, 15, 94, 51, 94, 52, 65, 107, 63, 79, 106, 82, 59,
    105, 94, 72, 106, 76, 65, 28, 12, 61, 11, 46, 31, 107, 94, 22, 102, 42, 13,
    47, 29, 82, 73, 84, 91, 11, 15, 12, 58, 24, 47, 100, 33, 60, 40, 110, 92, 73,
    45, 50, 41, 80, 83, 100, 60, 37, 40, 37, 53, 56, 84, 93, 15, 47, 106, 83, 18,
    20, 71, 82, 75, 52, 90, 39, 84, 69, 29, 88, 15, 76, 29, 40, 21, 94, 109, 31,
    89, 19, 96, 46, 70, 53, 86, 19, 42, 31, 36, 63, 44, 40, 78, 54, 69, 66, 80,
    67, 61, 20, 21, 17, 83, 39, 23, 102, 15, 17, 15, 28, 32, 21, 95, 48, 92, 87,
    43, 28, 73, 100, 88, 15, 84, 26, 95, 79, 78, 52, 79, 22, 16, 34, 72, 61, 52,
    104, 32, 27, 63, 77, 40, 109, 84, 84, 31, 88, 111, 34, 32, 41, 56, 29, 41,
    41, 27, 62, 76, 57, 31, 55, 32, 85, 63, 90, 41, 22, 42, 18, 83, 78, 104, 86,
    47, 41, 110, 29, 52, 92, 42, 83, 36, 62, 105, 107, 18, 78, 101, 40, 103, 18,
    95, 36, 49, 100, 99, 36, 20, 88, 72, 70, 36, 31, 106, 82, 77, 55, 23, 103,
    41, 83, 101, 62, 27, 42, 43, 16, 78, 21, 43, 28, 55, 37, 85, 50, 15, 48, 79,
    19, 24, 88, 13, 41, 14, 75, 63, 30, 82, 17, 86, 80, 74, 107, 92, 33, 74, 79,
    34, 61, 53, 65, 103, 47, 60, 13, 58, 16, 55, 78, 34, 95, 16, 106, 69, 55, 92,
    91, 72, 91, 20, 83, 15, 14, 36, 50, 74, 44, 109, 106, 75, 13, 52, 65, 42,
    107, 20, 16, 14, 87, 28, 52, 23, 95, 17, 87, 46, 84, 94, 98, 46, 109, 24, 30,
    40, 74, 97, 43, 85, 48, 62, 24, 37, 91, 40, 70, 105, 76, 63, 99, 78, 38, 110,
    46, 46, 29, 45, 91, 108, 40, 99, 21, 11, 38, 72, 76, 24, 19, 54, 98, 103,
    101, 35, 42, 22, 101, 46, 47, 49, 18, 54, 60, 50, 47, 47, 72, 102, 54, 23,
    49, 89, 11, 90, 69, 90, 55, 50, 75, 87, 42, 57, 23, 86, 46, 25, 73, 106, 64,
    63, 91, 27, 61, 33, 40, 48, 62, 59, 91, 110, 43, 21, 88, 42, 72, 22, 58, 104,
    96, 33, 68, 83, 28, 76, 91, 71, 45, 49, 53, 59, 95, 70, 45, 88, 66, 78, 110,
    109, 70, 100, 103, 48, 37, 42, 105, 104, 96, 67, 99, 97, 26, 92, 89, 81, 57,
    109, 31, 102, 35, 55, 84, 43, 102, 63, 23, 20, 111, 39, 71, 37, 43, 90, 17,
    75, 34, 82, 22, 87, 106, 90, 38, 103, 45, 62, 94, 11, 24, 39, 85, 12, 70, 47,
    57, 80, 26, 98, 23, 74, 11, 90, 19, 96, 78, 14, 84, 13, 32, 94, 16, 79, 47,
    56, 83, 80, 102, 79, 49, 89, 30, 11, 30, 43, 47, 60, 34, 34, 102, 43, 38, 48,
    11, 78, 93, 18, 95, 48, 36, 93, 76, 96, 101, 103, 27, 93, 84, 48, 111, 25,
    11, 85, 96, 100, 74, 14, 36, 57, 61, 80, 104, 17, 62, 81, 70, 40, 49, 103,
    39, 31, 33, 50, 110, 31, 51, 44, 66, 21, 41, 14, 56, 109, 107, 70, 72, 92,
    42, 24, 53, 31, 80, 20, 18, 11, 50, 31, 18, 45, 74, 107, 63, 19, 99, 79, 47,
    97, 46, 44, 89, 110, 12, 102, 73, 17, 67, 85, 94, 67, 58, 62, 59, 74, 60, 95,
    97, 35, 26, 103, 98, 14, 102, 107, 27, 64, 56, 71, 20, 87, 85, 24, 87, 14,
    21, 82, 31, 78, 109, 76, 88, 23, 75, 40, 91, 73, 12, 92, 82, 79, 75, 42, 79,
    96, 88, 25, 22, 108, 89, 92, 91, 87, 70, 89, 15, 104, 13, 51, 52, 95, 59, 37,
    76, 61, 69, 65, 28, 85, 26, 102, 94, 84, 28, 59, 43, 98, 105, 61, 19, 19, 61,
    15, 24, 50, 54, 43, 63, 67, 20, 23, 14, 57, 11, 47, 70, 66, 53, 83, 107, 68,
    14, 97, 108, 110, 42, 76, 61, 33, 54, 110, 16, 12, 22, 26, 103, 57, 74, 36,
    81, 104, 43, 72, 103, 93, 41, 42, 93, 71, 59, 71, 95, 64, 74, 24, 94, 68, 49,
    27, 27, 94, 54, 42, 41, 45, 98, 84, 70, 64, 74, 50, 59, 57, 75, 40, 59, 13,
    50, 66, 59, 42, 59, 51, 110, 17, 52, 84, 81, 38, 37, 78, 35, 102, 41, 83, 98,
    93, 59, 84, 28, 83, 48, 101, 24, 80, 29, 67, 17, 83, 40, 30, 13, 20, 47, 78,
    76, 83, 38, 30, 111, 56, 15, 62, 56, 83, 53, 65, 26, 70, 46, 17, 82, 99, 24,
    69, 107, 93, 108, 31, 76, 74, 59, 38, 19, 79, 84, 20, 32, 77, 54, 16, 52, 39,
    87, 79, 59, 56, 109, 26, 77, 101, 102, 38,
  ]
  let seed = seed.new(128)
  let generator = random.list(random.int(11, 111), of: 1000)
  let #(value, _seed) = random.step(generator, seed)
  should.equal(value, expected)
}

pub fn int_list_behaves_the_same_as_elm_implementation_seed_11_test() {
  let expected = [
    9, 1, 6, 4, 8, 9, 2, 3, 7, 6, 6, 10, 10, 6, 10, 10, 1, 3, 3, 4, 11, 2, 10, 1,
    7, 8, 1, 4, 5, 11, 11, 9, 9, 1, 11, 5, 11, 1, 5, 7, 1, 4, 4, 1, 8, 4, 2, 11,
    9, 9, 11, 1, 2, 10, 6, 8, 9, 1, 5, 1, 10, 3, 7, 1, 1, 7, 1, 1, 7, 5, 3, 9, 3,
    3, 10, 7, 10, 2, 9, 2, 11, 2, 3, 11, 3, 1, 2, 9, 10, 10, 11, 4, 2, 6, 8, 2,
    1, 3, 4, 11, 8, 7, 1, 1, 5, 6, 6, 9, 10, 7, 1, 3, 11, 11, 9, 8, 1, 8, 7, 9,
    11, 8, 5, 9, 1, 8, 11, 10, 4, 9, 8, 10, 6, 4, 6, 4, 1, 9, 10, 7, 11, 9, 8, 6,
    2, 3, 1, 1, 8, 9, 6, 5, 1, 1, 9, 7, 9, 7, 11, 7, 1, 5, 3, 3, 11, 5, 5, 11, 5,
    8, 2, 5, 10, 6, 1, 2, 10, 10, 8, 7, 5, 3, 2, 11, 1, 6, 10, 6, 2, 8, 11, 8, 8,
    7, 4, 5, 11, 9, 10, 7, 3, 7, 5, 1, 4, 2, 8, 4, 9, 10, 2, 11, 9, 10, 6, 8, 2,
    9, 8, 11, 5, 3, 1, 4, 2, 10, 9, 10, 6, 10, 3, 2, 6, 9, 5, 5, 5, 9, 3, 10, 5,
    4, 2, 2, 8, 6, 11, 11, 5, 11, 4, 10, 8, 9, 5, 9, 9, 7, 4, 2, 3, 3, 6, 3, 9,
    11, 5, 4, 2, 2, 9, 5, 10, 9, 7, 6, 6, 6, 7, 3, 6, 9, 5, 4, 8, 1, 5, 6, 4, 2,
    10, 5, 6, 6, 2, 8, 10, 11, 9, 1, 11, 10, 3, 1, 10, 1, 7, 8, 9, 11, 5, 6, 6,
    7, 4, 11, 9, 7, 5, 4, 4, 9, 4, 5, 2, 8, 10, 2, 1, 6, 8, 3, 6, 3, 7, 1, 4, 6,
    3, 9, 10, 5, 8, 4, 2, 9, 1, 6, 2, 5, 6, 7, 10, 5, 6, 7, 10, 6, 3, 5, 11, 8,
    9, 7, 6, 1, 8, 3, 11, 7, 5, 1, 6, 9, 10, 7, 8, 3, 4, 9, 4, 5, 4, 6, 4, 5, 8,
    11, 4, 2, 5, 11, 10, 11, 2, 9, 7, 9, 10, 7, 1, 8, 4, 9, 3, 1, 6, 6, 2, 8, 1,
    2, 9, 10, 3, 10, 2, 8, 11, 2, 8, 11, 1, 3, 2, 8, 8, 4, 1, 7, 10, 5, 3, 11,
    10, 6, 1, 6, 2, 3, 1, 9, 2, 4, 3, 10, 5, 11, 6, 4, 11, 9, 5, 3, 10, 8, 3, 7,
    7, 1, 4, 2, 7, 6, 5, 11, 2, 8, 9, 6, 9, 7, 11, 11, 11, 2, 6, 5, 6, 4, 8, 2,
    8, 4, 5, 8, 4, 9, 3, 5, 5, 3, 10, 3, 1, 4, 8, 1, 8, 2, 2, 7, 9, 8, 6, 1, 6,
    7, 8, 3, 6, 8, 9, 3, 1, 8, 10, 7, 8, 5, 2, 9, 7, 5, 8, 5, 9, 3, 7, 8, 4, 1,
    10, 6, 8, 7, 1, 8, 6, 7, 10, 1, 5, 8, 1, 1, 3, 10, 10, 4, 4, 9, 1, 5, 11, 8,
    8, 10, 6, 1, 9, 3, 10, 9, 5, 2, 11, 11, 4, 8, 11, 9, 5, 6, 6, 2, 4, 7, 5, 2,
    3, 8, 8, 1, 2, 4, 4, 11, 8, 3, 8, 2, 3, 11, 11, 1, 2, 2, 7, 8, 3, 5, 4, 1, 3,
    3, 2, 3, 7, 8, 11, 10, 7, 9, 8, 7, 2, 10, 7, 3, 9, 2, 4, 11, 11, 7, 6, 9, 7,
    8, 7, 6, 8, 5, 8, 4, 4, 10, 3, 7, 9, 2, 11, 8, 4, 8, 1, 10, 8, 9, 2, 8, 2, 4,
    4, 7, 6, 1, 1, 8, 1, 9, 2, 2, 8, 3, 7, 4, 8, 5, 7, 1, 7, 3, 8, 3, 7, 5, 5, 3,
    3, 8, 5, 1, 4, 10, 6, 6, 10, 2, 1, 1, 7, 11, 6, 8, 2, 8, 8, 5, 11, 9, 3, 10,
    7, 11, 11, 5, 6, 8, 1, 7, 4, 5, 8, 4, 7, 8, 4, 4, 10, 3, 7, 6, 10, 10, 3, 3,
    7, 3, 8, 1, 1, 1, 11, 8, 11, 5, 5, 10, 4, 10, 5, 1, 6, 6, 1, 10, 9, 6, 3, 9,
    11, 11, 8, 10, 2, 9, 3, 5, 9, 1, 3, 1, 10, 2, 10, 11, 4, 1, 5, 3, 3, 2, 10,
    5, 5, 7, 8, 8, 1, 8, 11, 11, 4, 8, 11, 1, 5, 1, 3, 10, 7, 3, 11, 11, 8, 3, 4,
    1, 9, 1, 7, 6, 4, 1, 1, 4, 1, 6, 6, 3, 9, 5, 10, 7, 8, 6, 5, 6, 9, 4, 5, 4,
    5, 3, 9, 1, 11, 6, 9, 6, 10, 6, 9, 7, 10, 10, 8, 11, 1, 9, 7, 5, 2, 7, 6, 10,
    3, 5, 5, 5, 8, 11, 7, 2, 6, 10, 3, 1, 10, 10, 3, 9, 8, 7, 6, 1, 6, 3, 4, 10,
    11, 9, 11, 1, 2, 11, 4, 11, 10, 3, 10, 8, 3, 7, 9, 11, 10, 1, 11, 9, 11, 5,
    9, 9, 10, 1, 1, 5, 2, 5, 10, 5, 1, 7, 7, 5, 6, 2, 7, 9, 9, 8, 10, 5, 4, 11,
    5, 10, 8, 1, 4, 2, 1, 8, 7, 1, 9, 6, 1, 6, 2, 9, 10, 8, 8, 11, 6, 9, 8, 11,
    3, 7, 7, 11, 6, 1, 9, 2, 7, 7, 7, 10, 4, 7, 9, 5, 6, 7, 11, 10, 8, 1, 7, 7,
    5, 3, 5, 6, 5, 4, 11, 1, 2, 8, 1, 4, 5, 6, 2, 8, 3, 6, 5, 8, 9, 7, 6, 3, 3,
    5, 4, 5, 3, 8, 1, 10, 5, 11,
  ]
  let seed = seed.new(11)
  let generator = random.list(random.int(1, 11), of: 1000)
  let #(value, _seed) = random.step(generator, seed)
  should.equal(value, expected)
}

pub fn int_list_behaves_the_same_as_elm_implementation_with_power_of_two_range_seed_11_test() {
  let expected = [
    6, 31, 4, 29, 5, 24, 24, 21, 13, 10, 26, 23, 28, 27, 24, 25, 11, 24, 32, 5,
    10, 32, 8, 16, 16, 28, 7, 26, 7, 27, 28, 4, 18, 7, 6, 14, 27, 4, 11, 2, 7, 3,
    14, 21, 2, 4, 2, 15, 15, 3, 17, 29, 3, 24, 7, 12, 10, 8, 8, 18, 28, 20, 18,
    14, 30, 17, 15, 6, 30, 12, 4, 24, 11, 15, 17, 6, 4, 24, 22, 23, 20, 22, 10,
    17, 21, 23, 11, 4, 23, 27, 32, 6, 16, 25, 11, 7, 28, 2, 13, 5, 24, 18, 23,
    26, 1, 1, 22, 9, 11, 8, 4, 28, 9, 13, 19, 4, 18, 19, 20, 7, 5, 21, 24, 10,
    25, 31, 29, 32, 15, 7, 14, 19, 13, 13, 2, 19, 14, 1, 23, 20, 16, 24, 16, 30,
    20, 23, 9, 20, 11, 7, 2, 23, 5, 4, 23, 20, 23, 13, 27, 10, 2, 30, 31, 18, 13,
    8, 19, 16, 3, 19, 17, 30, 24, 29, 15, 16, 21, 26, 11, 22, 19, 32, 6, 12, 22,
    10, 7, 23, 10, 4, 11, 28, 32, 26, 2, 24, 21, 11, 17, 3, 19, 15, 29, 27, 10,
    4, 18, 1, 28, 13, 23, 20, 20, 31, 22, 1, 9, 7, 32, 28, 16, 22, 1, 12, 15, 9,
    17, 11, 10, 21, 8, 14, 23, 17, 13, 14, 16, 13, 8, 2, 32, 5, 14, 30, 27, 18,
    15, 7, 17, 16, 8, 22, 29, 32, 13, 22, 14, 5, 16, 23, 12, 32, 19, 20, 17, 2,
    20, 31, 29, 18, 12, 24, 18, 9, 1, 1, 25, 32, 4, 6, 5, 17, 31, 10, 22, 16, 12,
    3, 25, 30, 10, 5, 9, 20, 1, 3, 1, 27, 2, 10, 30, 6, 7, 18, 27, 6, 28, 8, 29,
    3, 31, 32, 21, 15, 2, 10, 24, 21, 7, 17, 3, 20, 3, 14, 3, 28, 7, 1, 30, 12,
    31, 17, 4, 29, 11, 27, 22, 25, 18, 24, 19, 17, 11, 16, 3, 23, 8, 12, 14, 8,
    21, 9, 12, 17, 29, 12, 3, 16, 1, 18, 8, 8, 20, 1, 28, 13, 2, 2, 11, 24, 27,
    20, 30, 32, 8, 11, 19, 23, 5, 5, 29, 19, 25, 2, 30, 23, 21, 1, 19, 16, 20,
    28, 15, 26, 19, 18, 20, 32, 19, 3, 24, 28, 20, 15, 19, 3, 3, 25, 26, 26, 16,
    14, 19, 31, 14, 8, 6, 7, 12, 25, 32, 23, 6, 5, 29, 27, 22, 9, 7, 1, 32, 11,
    9, 26, 23, 6, 5, 13, 12, 20, 11, 3, 4, 25, 26, 31, 4, 13, 8, 12, 2, 25, 28,
    25, 27, 20, 27, 32, 22, 17, 15, 1, 11, 13, 9, 11, 26, 10, 15, 31, 32, 20, 32,
    8, 31, 18, 11, 12, 23, 24, 3, 11, 26, 32, 10, 13, 14, 25, 8, 15, 10, 15, 12,
    6, 32, 15, 16, 11, 28, 25, 31, 3, 19, 20, 15, 31, 28, 1, 30, 14, 24, 31, 14,
    21, 26, 2, 3, 20, 27, 24, 24, 10, 7, 24, 6, 16, 23, 22, 10, 31, 16, 29, 5,
    25, 24, 29, 9, 26, 32, 3, 12, 12, 31, 11, 12, 30, 10, 16, 19, 3, 28, 13, 18,
    8, 27, 16, 13, 28, 17, 23, 7, 6, 14, 15, 20, 15, 7, 4, 14, 28, 22, 6, 7, 25,
    2, 26, 21, 14, 28, 16, 1, 22, 13, 24, 4, 23, 17, 13, 11, 14, 30, 16, 12, 26,
    3, 18, 26, 7, 5, 5, 28, 25, 13, 20, 24, 8, 12, 24, 22, 29, 18, 7, 7, 29, 3,
    1, 4, 29, 32, 5, 14, 3, 13, 1, 18, 18, 15, 28, 1, 9, 24, 15, 4, 8, 4, 21, 10,
    22, 3, 3, 6, 21, 21, 23, 16, 5, 20, 6, 28, 28, 15, 13, 11, 4, 31, 19, 22, 21,
    32, 24, 8, 20, 25, 11, 32, 16, 30, 11, 19, 11, 7, 26, 30, 31, 13, 5, 18, 3,
    15, 4, 5, 19, 12, 11, 25, 1, 8, 9, 27, 12, 8, 28, 20, 30, 28, 18, 15, 5, 3,
    32, 31, 27, 20, 25, 32, 24, 9, 25, 19, 17, 26, 18, 1, 32, 11, 23, 9, 3, 17,
    31, 30, 23, 32, 16, 32, 25, 13, 3, 9, 17, 10, 10, 1, 27, 16, 25, 19, 27, 14,
    8, 23, 9, 16, 2, 4, 23, 1, 30, 8, 30, 14, 2, 9, 5, 1, 2, 30, 4, 7, 25, 7, 8,
    26, 17, 1, 10, 21, 1, 29, 14, 14, 4, 24, 24, 8, 4, 27, 7, 4, 29, 15, 2, 14,
    2, 22, 1, 15, 31, 5, 2, 26, 17, 19, 28, 24, 12, 3, 12, 5, 9, 8, 7, 16, 19,
    30, 10, 19, 18, 18, 2, 10, 4, 13, 30, 22, 3, 20, 15, 20, 22, 14, 32, 13, 10,
    2, 19, 8, 13, 32, 11, 15, 30, 15, 27, 18, 11, 13, 30, 22, 32, 24, 24, 32, 27,
    13, 4, 24, 8, 31, 24, 10, 18, 2, 32, 28, 1, 26, 30, 32, 4, 25, 2, 4, 13, 25,
    23, 17, 26, 6, 12, 32, 24, 30, 10, 8, 23, 25, 4, 26, 20, 27, 10, 10, 14, 18,
    1, 12, 20, 32, 5, 7, 16, 8, 23, 4, 14, 31, 17, 32, 16, 31, 11, 28, 6, 15, 4,
    20, 4, 5, 6, 14, 16, 27, 15, 29, 11, 32, 24, 31, 8, 3, 24, 30, 11, 3, 29, 2,
    25, 14, 21, 1, 15, 5, 9, 22, 12, 7, 6, 15, 21, 4, 25, 8, 5, 31, 32, 26, 1,
    18, 27, 30, 4, 11, 2, 18, 12, 4, 31, 13, 13, 2, 21, 16, 25, 9, 21, 30, 26,
    20, 17, 30, 11, 8, 25, 27, 25, 8, 21, 15, 29, 5, 20, 28, 32, 30, 31, 21, 14,
    18, 31, 12, 25, 2, 5, 4, 22, 5, 27, 4, 29,
  ]
  let seed = seed.new(11)
  let generator = random.list(random.int(32, 1), of: 1000)
  let #(value, _seed) = random.step(generator, seed)
  should.equal(value, expected)
}

pub fn int_list_behaves_the_same_as_elm_implementation_with_power_of_two_range_seed_128_test() {
  let expected = [
    356, 839, 601, 953, 821, 828, 590, 355, 509, 850, 326, 333, 91, 251, 37,
    1006, 894, 179, 34, 319, 842, 894, 336, 795, 650, 388, 557, 610, 239, 497,
    857, 303, 877, 201, 332, 906, 458, 760, 562, 341, 535, 728, 42, 824, 101,
    708, 735, 258, 667, 256, 518, 363, 666, 867, 955, 246, 407, 453, 54, 334,
    960, 889, 335, 389, 584, 845, 64, 994, 930, 720, 937, 659, 890, 562, 836,
    703, 733, 308, 799, 509, 130, 703, 573, 187, 963, 902, 25, 17, 321, 877, 156,
    148, 587, 564, 557, 275, 786, 644, 1015, 185, 911, 146, 259, 992, 765, 263,
    533, 281, 46, 605, 533, 181, 773, 252, 464, 976, 949, 61, 778, 806, 262, 675,
    156, 275, 458, 181, 520, 1022, 568, 794, 809, 988, 804, 767, 449, 874, 470,
    746, 843, 559, 274, 30, 479, 166, 260, 532, 33, 544, 286, 121, 896, 748, 683,
    449, 1011, 692, 935, 56, 66, 662, 714, 89, 901, 728, 252, 654, 711, 391, 236,
    876, 184, 399, 256, 559, 115, 969, 303, 960, 197, 298, 189, 402, 843, 147,
    623, 94, 360, 127, 610, 500, 954, 771, 334, 374, 738, 679, 437, 452, 982,
    916, 1006, 278, 433, 242, 905, 499, 595, 892, 806, 150, 605, 224, 276, 355,
    281, 733, 906, 187, 427, 180, 78, 360, 327, 385, 812, 447, 742, 919, 507,
    449, 518, 714, 372, 358, 616, 428, 515, 638, 642, 213, 469, 253, 321, 602,
    714, 322, 154, 520, 797, 731, 377, 350, 100, 286, 317, 919, 271, 367, 73, 17,
    275, 331, 889, 598, 76, 205, 185, 1004, 832, 202, 1005, 582, 615, 366, 638,
    113, 611, 152, 449, 778, 98, 435, 88, 176, 821, 855, 770, 612, 471, 373, 724,
    383, 626, 760, 512, 234, 705, 626, 890, 699, 24, 121, 727, 322, 227, 646,
    253, 369, 538, 12, 852, 727, 792, 663, 734, 602, 860, 735, 743, 158, 342,
    295, 401, 178, 677, 523, 818, 644, 426, 953, 584, 5, 748, 618, 111, 368, 708,
    640, 60, 614, 383, 689, 700, 682, 380, 287, 669, 34, 408, 733, 340, 492, 833,
    364, 289, 1008, 261, 188, 275, 13, 56, 571, 803, 937, 339, 654, 334, 739,
    337, 413, 534, 635, 909, 471, 778, 177, 961, 100, 221, 786, 528, 352, 971,
    468, 417, 281, 515, 716, 229, 666, 720, 287, 108, 534, 181, 716, 15, 809,
    291, 826, 530, 807, 754, 89, 821, 75, 498, 528, 284, 705, 356, 759, 908, 802,
    120, 134, 517, 382, 247, 214, 879, 777, 368, 171, 206, 717, 782, 962, 48,
    538, 429, 764, 384, 461, 436, 406, 328, 1021, 690, 525, 262, 864, 189, 638,
    191, 686, 954, 664, 297, 328, 25, 1001, 414, 751, 469, 173, 540, 895, 88,
    942, 625, 536, 898, 91, 890, 477, 353, 261, 947, 136, 382, 534, 522, 689,
    447, 71, 876, 699, 359, 340, 477, 628, 715, 599, 561, 701, 87, 667, 56, 1013,
    694, 727, 766, 634, 821, 768, 944, 442, 599, 273, 304, 40, 729, 285, 457,
    419, 159, 508, 380, 331, 796, 65, 575, 716, 4, 237, 964, 499, 1005, 64, 207,
    961, 610, 41, 394, 64, 162, 353, 482, 113, 852, 859, 67, 916, 996, 951, 715,
    34, 824, 548, 483, 396, 96, 180, 623, 117, 560, 839, 179, 482, 998, 513, 623,
    770, 466, 495, 255, 273, 610, 756, 111, 245, 373, 364, 831, 575, 926, 644,
    150, 303, 142, 766, 905, 562, 814, 729, 636, 163, 304, 574, 12, 817, 776,
    618, 476, 254, 909, 646, 703, 51, 176, 771, 192, 57, 768, 610, 610, 801, 710,
    552, 163, 406, 86, 845, 263, 407, 564, 438, 220, 609, 284, 539, 975, 185,
    501, 317, 778, 467, 359, 162, 180, 356, 790, 52, 760, 409, 899, 606, 505,
    112, 587, 16, 123, 809, 230, 269, 995, 338, 115, 808, 361, 520, 677, 239,
    597, 277, 981, 752, 412, 811, 610, 932, 379, 277, 879, 520, 496, 751, 250,
    162, 301, 681, 344, 502, 35, 256, 944, 212, 597, 131, 942, 413, 1021, 892,
    173, 393, 52, 396, 393, 34, 333, 481, 519, 663, 662, 611, 542, 532, 857, 266,
    906, 119, 654, 131, 581, 420, 897, 494, 689, 519, 770, 96, 213, 268, 469,
    551, 940, 593, 585, 86, 941, 1007, 908, 614, 612, 675, 84, 515, 107, 801,
    541, 155, 471, 12, 604, 916, 10, 380, 25, 676, 955, 874, 138, 817, 933, 670,
    767, 675, 215, 754, 54, 265, 797, 926, 1001, 394, 923, 744, 125, 507, 431,
    102, 598, 786, 48, 889, 455, 1011, 484, 56, 625, 560, 872, 406, 897, 344,
    742, 153, 314, 959, 837, 774, 230, 356, 416, 75, 331, 593, 242, 626, 759,
    283, 608, 130, 508, 553, 311, 993, 236, 733, 569, 256, 698, 87, 629, 403,
    295, 284, 703, 818, 715, 211, 553, 323, 123, 19, 398, 241, 786, 848, 1024,
    293, 493, 595, 357, 961, 80, 301, 1009, 214, 165, 757, 372, 255, 39, 1009,
    999, 837, 450, 910, 717, 531, 946, 618, 622, 26, 892, 614, 404, 840, 826,
    948, 279, 929, 867, 50, 911, 791, 412, 362, 731, 771, 297, 63, 963, 791, 215,
    958, 304, 607, 1022, 519, 823, 832, 293, 540, 751, 858, 207, 522, 373, 44,
    544, 692, 65, 456, 301, 914, 728, 169, 934, 818, 658, 676, 305, 611, 821, 67,
    44, 194, 657, 731, 12, 243, 786, 477, 732, 394, 821, 536, 263, 77, 371, 484,
    115, 694, 754, 604, 78, 562, 262, 538, 688, 480, 564, 812, 283, 789, 304,
    439, 178, 601, 717, 201, 616, 872, 470, 192, 1002, 532, 70, 400, 493, 327,
    329, 744, 1000, 941, 586, 755, 1015, 234, 238, 173, 440, 158, 697, 941, 153,
    24, 107, 16, 542, 788, 795, 9, 288, 987, 125, 453, 148, 667, 335, 654, 139,
    1009, 11, 698, 531, 360, 815, 317, 614, 486, 624, 22, 746, 870, 370, 35,
    1013, 672, 377, 166, 774, 765, 207, 283, 542, 617, 814, 14, 893, 662, 64,
    247, 881, 172, 975, 1013,
  ]
  let seed = seed.new(128)
  let generator = random.list(random.int(1024, 1), of: 1000)
  let #(value, _seed) = random.step(generator, seed)
  should.equal(value, expected)
}
